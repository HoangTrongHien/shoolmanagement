// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.Data;

#nullable disable

namespace SchoolManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250423092848_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SchoolManagement.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OccurDate")
                        .HasColumnType("int");

                    b.Property<int>("OnTeachClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentSubscriptionId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnTeachClassId");

                    b.HasIndex("StudentSubscriptionId");

                    b.HasIndex("TeacherSubscriptionId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.OnTeachClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SubjectId");

                    b.ToTable("OnTeachClasses");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.ScheduleInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleInformations");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.StudentAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentAccounts");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.StudentSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OnTeachClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnTeachClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSubscriptions");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.TeacherAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeacherAccounts");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.TeacherSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OnTeachClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnTeachClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubscriptions");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Attendance", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.OnTeachClass", "OnTeachClass")
                        .WithMany("Attendances")
                        .HasForeignKey("OnTeachClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.Entities.StudentSubscription", "StudentSubscription")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.Entities.TeacherSubscription", "TeacherSubscription")
                        .WithMany("Attendances")
                        .HasForeignKey("TeacherSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OnTeachClass");

                    b.Navigation("StudentSubscription");

                    b.Navigation("TeacherSubscription");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.OnTeachClass", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.Schedule", "Schedule")
                        .WithMany("OnTeachClasses")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.Entities.Subject", "Subject")
                        .WithMany("OnTeachClasses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.ScheduleInformation", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleInformations")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.StudentAccount", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.Student", "Student")
                        .WithOne("StudentAccount")
                        .HasForeignKey("SchoolManagement.Models.Entities.StudentAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.StudentSubscription", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.OnTeachClass", "OnTeachClass")
                        .WithMany("StudentSubscriptions")
                        .HasForeignKey("OnTeachClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.Entities.Student", "Student")
                        .WithMany("StudentSubscriptions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnTeachClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.TeacherAccount", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.Teacher", "Teacher")
                        .WithOne("TeacherAccount")
                        .HasForeignKey("SchoolManagement.Models.Entities.TeacherAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.TeacherSubscription", b =>
                {
                    b.HasOne("SchoolManagement.Models.Entities.OnTeachClass", "OnTeachClass")
                        .WithMany("TeacherSubscriptions")
                        .HasForeignKey("OnTeachClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.Entities.Teacher", "Teacher")
                        .WithMany("TeacherSubscriptions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnTeachClass");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.OnTeachClass", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("StudentSubscriptions");

                    b.Navigation("TeacherSubscriptions");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Schedule", b =>
                {
                    b.Navigation("OnTeachClasses");

                    b.Navigation("ScheduleInformations");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Student", b =>
                {
                    b.Navigation("StudentAccount")
                        .IsRequired();

                    b.Navigation("StudentSubscriptions");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.StudentSubscription", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Subject", b =>
                {
                    b.Navigation("OnTeachClasses");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherAccount")
                        .IsRequired();

                    b.Navigation("TeacherSubscriptions");
                });

            modelBuilder.Entity("SchoolManagement.Models.Entities.TeacherSubscription", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
